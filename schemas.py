# Backend/schemas.py

from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime

# --- Base Schema for Application ---
# This contains all the fields that are common to both creating and reading an application.
# It helps to avoid repeating code.
class ApplicationBase(BaseModel):
    first_name: str
    last_name: str
    email: EmailStr
    phone_number: str
    country: str
    preferred_course: str
    age : int
    previous_experience: Optional[str] = None
    learning_goals: Optional[str] = None
    parent_name: str
    relationship: str
    gender: str
    whatsapp_number: str


# --- Schema for Creating a New Application ---
# This is the model that will be used when receiving data from the frontend form.
# It inherits all the fields from ApplicationBase.
class ApplicationCreate(ApplicationBase):
    pass # No extra fields are needed for creation


# --- Schema for Reading an Application ---
# This is the model that will be used when returning data from the database to the user.
# It includes fields that are generated by the database, like 'id' and 'created_at'.
class Application(ApplicationBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    # This configuration tells Pydantic to read the data even if it's not a dict,
    # but an ORM model (or any other arbitrary object with attributes).
    # This is crucial for converting our SQLAlchemy model instance to a Pydantic schema.
    class Config:
        from_attributes = True

